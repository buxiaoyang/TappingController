C51 COMPILER V7.50   UART                                                                  08/09/2014 18:02:17 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\uart.c LARGE BROWSE INCDIR(.\include\) DEBUG OBJECTEXTEND PRINT(.\li
                    -sting\uart.lst) OBJECT(.\output\uart.obj)

line level    source

   1          #include <uart.h>
   2          #include <reg52.h>
   3          #include <intrins.h>
   4          #include <parameter.h>
   5          
   6          
   7          #define FOSC 11059200L      //System frequency
   8          #define BAUD 115200         //UART baudrate
   9          
  10          /*Define UART parity mode*/
  11          #define NONE_PARITY     0   //None parity
  12          #define ODD_PARITY      1   //Odd parity
  13          #define EVEN_PARITY     2   //Even parity
  14          #define MARK_PARITY     3   //Mark parity
  15          #define SPACE_PARITY    4   //Space parity
  16          
  17          #define PARITYBIT NONE_PARITY   //Testing even parity
  18          
  19          /*Declare SFR associated with the UART2 */
  20          sfr AUXR  = 0x8e;           //Auxiliary register
  21          sfr S2CON = 0x9a;           //UART2 control register
  22          sfr S2BUF = 0x9b;           //UART2 data buffer
  23          sfr BRT   = 0x9c;           //Baudrate generator
  24          sfr IE2   = 0xaf;           //Interrupt control 2
  25          
  26          #define S2RI  0x01          //S2CON.0
  27          #define S2TI  0x02          //S2CON.1
  28          #define S2RB8 0x04          //S2CON.2
  29          #define S2TB8 0x08          //S2CON.3
  30          
  31          bit busy;
  32          bit uartReceiveOK = 0;
  33          
  34          BYTE uartBuffer[15] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
  35          
  36          BYTE receiveSteps = 0;  // 0: 没有数据接收
  37                                                          // 1: 接收到5A
  38                                                          // 2：接收到A5
  39                                                          // 3：接收到数据长度
  40                                                          // 4: 接收数据
  41                                                          // 5：确定指令动作
  42          BYTE dataIndex = 0;
  43          BYTE dataLength = 0;
  44            
  45          void SendData(BYTE dat);
  46          void SendString(char *s);
  47          void ReceiveData(BYTE dat);
  48          void anyData();
  49          
  50          void uart_init()
  51          {
  52   1      #if (PARITYBIT == NONE_PARITY)
  53   1          S2CON = 0x50;           //8-bit variable UART
  54   1      #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
C51 COMPILER V7.50   UART                                                                  08/09/2014 18:02:17 PAGE 2   

                  S2CON = 0xda;           //9-bit variable UART, parity bit initial to 1
              #elif (PARITYBIT == SPACE_PARITY)
                  S2CON = 0xd2;           //9-bit variable UART, parity bit initial to 0
              #endif
  59   1      
  60   1          BRT = -(FOSC/32/BAUD);  //Set auto-reload vaule of baudrate generator
  61   1          AUXR = 0x14;            //Baudrate generator work in 1T mode
  62   1          IE2 = 0x01;             //Enable UART2 interrupt
  63   1          EA = 1;                 //Open master interrupt switch
  64   1      
  65   1          //SendString("STC12C5A60S2\r\nUart2 Test !\r\n");
  66   1          //while(1);
  67   1      }
  68          
  69          /*----------------------------
  70          UART2 interrupt service routine
  71          ----------------------------*/
  72          void Uart2() interrupt 8 using 1
  73          {
  74   1          if (S2CON & S2RI)
  75   1          {
  76   2              S2CON &= ~S2RI;     //Clear receive interrupt flag
  77   2              ReceiveData(S2BUF);
  78   2                      //P2 = S2BUF;         //P0 show UART data
  79   2              //P2 = (S2CON & S2RB8);//P2.2 show parity bit
  80   2          }
  81   1          if (S2CON & S2TI)
  82   1          {
  83   2              S2CON &= ~S2TI;     //Clear transmit interrupt flag
  84   2              busy = 0;           //Clear transmit busy flag
  85   2          }
  86   1      }
  87          
  88          /*----------------------------
  89          Send a byte data to UART
  90          Input: dat (data to be sent)
  91          Output:None
  92          ----------------------------*/
  93          void SendData(BYTE dat)
  94          {
  95   1          while (busy);           //Wait for the completion of the previous data is sent
  96   1          ACC = dat;              //Calculate the even parity bit P (PSW.0)
  97   1          if (P)                  //Set the parity bit according to P
  98   1          {
  99   2      #if (PARITYBIT == ODD_PARITY)
                      S2CON &= ~S2TB8;    //Set parity bit to 0
              #elif (PARITYBIT == EVEN_PARITY)
                      S2CON |= S2TB8;     //Set parity bit to 1
              #endif
 104   2          }
 105   1          else
 106   1          {
 107   2      #if (PARITYBIT == ODD_PARITY)
                      S2CON |= S2TB8;     //Set parity bit to 1
              #elif (PARITYBIT == EVEN_PARITY)
                      S2CON &= ~S2TB8;    //Set parity bit to 0
              #endif
 112   2          }
 113   1          busy = 1;
 114   1          S2BUF = ACC;            //Send data to UART2 buffer
 115   1      }
 116          
C51 COMPILER V7.50   UART                                                                  08/09/2014 18:02:17 PAGE 3   

 117          /*----------------------------
 118          Send a string to UART
 119          Input: s (address of string)
 120          Output:None
 121          ----------------------------*/
 122          void SendString(char *s)
 123          {
 124   1          while (*s)              //Check the end of the string
 125   1          {
 126   2              SendData(*s++);     //Send current char and increment string ptr
 127   2          }
 128   1      }
 129          
 130          void SendDataToScreen(WORD address, WORD dat)
 131          {
 132   1              SendData(0x5A);
 133   1              SendData(0xA5);
 134   1              SendData(0x05);
 135   1              SendData(0x82);
 136   1              SendData(address>>8);
 137   1              SendData(address);
 138   1              SendData(dat>>8);
 139   1              SendData(dat);
 140   1      }
 141          
 142          void ChangeScreenPage(WORD page)
 143          {
 144   1              SendData(0x5A);
 145   1              SendData(0xA5);
 146   1              SendData(0x04);
 147   1              SendData(0x80);
 148   1              SendData(0x03);
 149   1              SendData(page>>8);
 150   1              SendData(page);
 151   1      }
 152          
 153          void ReceiveData(BYTE dat)
 154          {
 155   1              // 0: 接收到5A
 156   1              // 1：接收到A5
 157   1              // 2：接收到数据长度
 158   1              // 3: 接收数据
 159   1              // 4：确定指令动作
 160   1              switch(receiveSteps)
 161   1              {
 162   2                      case 0:
 163   2                              if(dat == 0x5A)
 164   2                              {
 165   3                                      receiveSteps ++;
 166   3                              }
 167   2                      break;
 168   2                      case 1:
 169   2                              if(dat == 0xA5)
 170   2                              {
 171   3                                      receiveSteps ++;
 172   3                              }
 173   2                              else
 174   2                              {
 175   3                                      receiveSteps = 0;
 176   3                              }
 177   2                      break;
 178   2                      case 2:
C51 COMPILER V7.50   UART                                                                  08/09/2014 18:02:17 PAGE 4   

 179   2                              dataLength = dat;
 180   2                              dataIndex = 0;
 181   2                              receiveSteps ++;
 182   2                      break;
 183   2                      case 3:
 184   2                              uartBuffer[dataIndex] = dat;
 185   2                              dataIndex ++;
 186   2                              if(dataIndex >= dataLength)
 187   2                              {
 188   3                                      anyData();
 189   3                                      receiveSteps = 0;
 190   3                              }
 191   2                      break;
 192   2                      default:
 193   2                              _nop_();
 194   2                              receiveSteps = 0;
 195   2              }
 196   1      }
 197          
 198          void anyData()
 199          {
 200   1              WORD dat = ((uartBuffer[4]<<8) | uartBuffer[5]);
 201   1              refreshDisplay = 1;
 202   1              if(uartBuffer[2] == 0x00)//运行模式     0：手动模式(停止)  1：自动模式(停止) 2：手动模式(启动) 3：自动模式(启
             -动)   返回数据0xEE
 203   1              {
 204   2                      if(runMode == 0 || runMode == 2)
 205   2                      {
 206   3                              runMode = 1;    
 207   3                      }
 208   2                      else
 209   2                      {
 210   3                              runMode = 0;
 211   3                      }
 212   2              }
 213   1              else if(uartBuffer[2] == 0x01)  //电机状态      0：电机停止   1：电机启动  返回数据0xEE
 214   1              {
 215   2                      if(montorMode == 0)
 216   2                      {
 217   3                              montorMode = 1;
 218   3                      }
 219   2                      else
 220   2                      {
 221   3                              montorMode = 0;
 222   3                      }
 223   2              }
 224   1              else if(uartBuffer[2] == 0x11)  //时间设置1     字(int) 最大9.9
 225   1              {
 226   2                      intervalTimer1 = dat;
 227   2                      parameter_save();
 228   2              }
 229   1              else if(uartBuffer[2] == 0x12)  //时间设置2     字(int)
 230   1              {
 231   2                      intervalTimer2 = dat;
 232   2                      parameter_save();
 233   2              }
 234   1              else if(uartBuffer[2] == 0x13)  //时间设置3     字(int)
 235   1              {
 236   2                      intervalTimer3 = dat;
 237   2                      parameter_save();
 238   2              }
 239   1              else if(uartBuffer[2] == 0x14)  //时间设置4     字(int)
C51 COMPILER V7.50   UART                                                                  08/09/2014 18:02:17 PAGE 5   

 240   1              {
 241   2                      intervalTimer4 = dat;
 242   2                      parameter_save();
 243   2              }
 244   1              else if(uartBuffer[2] == 0x15)  //时间设置5     字(int)
 245   1              {
 246   2                      intervalTimer5 = dat;
 247   2                      parameter_save();
 248   2              }
 249   1              else if(uartBuffer[2] == 0x16)  //时间设置6     字(int)
 250   1              {
 251   2                      intervalTimer6 = dat;
 252   2                      parameter_save();
 253   2              }
 254   1              else if(uartBuffer[2] == 0x17)  //时间设置7     字(int)
 255   1              {
 256   2                      intervalTimer7 = dat;
 257   2                      parameter_save();
 258   2              }
 259   1              else if(uartBuffer[2] == 0x18)  //报警设置 气缸1        字(int)
 260   1              {
 261   2                      cylinderAlarm1 = dat;
 262   2                      parameter_save();       
 263   2              }
 264   1              else if(uartBuffer[2] == 0x19)  //报警设置 气缸2        字(int)
 265   1              {
 266   2                      cylinderAlarm2 = dat;
 267   2                      parameter_save();
 268   2              }
 269   1              else if(uartBuffer[2] == 0x1A)  //报警设置 气缸3        字(int)
 270   1              {
 271   2                      cylinderAlarm3 = dat;
 272   2                      parameter_save();
 273   2              }
 274   1              else if(uartBuffer[2] == 0x1B)  //报警设置 气缸4        字(int)
 275   1              {
 276   2                      cylinderAlarm4 = dat;
 277   2                      parameter_save();
 278   2              }
 279   1              else if(uartBuffer[2] == 0x1C)  //报警设置 气缸5        字(int)
 280   1              {
 281   2                      cylinderAlarm5 = dat;
 282   2                      parameter_save();
 283   2              }
 284   1              else if(uartBuffer[2] == 0x1D)  //复位计数按钮  返回数据0xEE
 285   1              {
 286   2                      pieceCount = 0;
 287   2              }
 288   1              else if(uartBuffer[2] == 0x1E)  //手动模式 按钮 气缸1   0：关闭  1：开启
 289   1              {
 290   2                      if(cylinder1)
 291   2                      {
 292   3                              cylinder1 = 0;
 293   3                      }
 294   2                      else
 295   2                      {
 296   3                              cylinder1 = 1;  
 297   3                      }
 298   2              }
 299   1              else if(uartBuffer[2] == 0x1F)  //手动模式 按钮 气缸2   0：关闭  1：开启
 300   1              {
 301   2                      if(cylinder2)
C51 COMPILER V7.50   UART                                                                  08/09/2014 18:02:17 PAGE 6   

 302   2                      {
 303   3                              cylinder2 = 0;
 304   3                      }
 305   2                      else
 306   2                      {
 307   3                              cylinder2 = 1;  
 308   3                      }
 309   2              }
 310   1              else if(uartBuffer[2] == 0x20)  //手动模式 按钮 气缸3   0：关闭  1：开启
 311   1              {
 312   2                      if(cylinder3)
 313   2                      {
 314   3                              cylinder3 = 0;
 315   3                      }
 316   2                      else
 317   2                      {
 318   3                              cylinder3 = 1;  
 319   3                      }
 320   2              }
 321   1              else if(uartBuffer[2] == 0x21)  //手动模式 按钮 气缸4   0：关闭  1：开启
 322   1              {
 323   2                      if(cylinder4)
 324   2                      {
 325   3                              cylinder4 = 0;
 326   3                      }
 327   2                      else
 328   2                      {
 329   3                              cylinder4 = 1;  
 330   3                      }
 331   2              }
 332   1              else if(uartBuffer[2] == 0x22)  //手动模式 按钮 气缸5   0：关闭  1：开启
 333   1              {
 334   2                      if(cylinder5)
 335   2                      {
 336   3                              cylinder5 = 0;
 337   3                      }
 338   2                      else
 339   2                      {
 340   3                              cylinder5 = 1;  
 341   3                      }
 342   2              }
 343   1              else if(uartBuffer[2] == 0x24)  //解除警报按钮  返回数据0xEE
 344   1              {
 345   2                      alarmMode = 0;
 346   2              }
 347   1              uartReceiveOK = 1;      
 348   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    749    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
